<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>调度场算法(Shunting Yard Algorithm)</title>
    <url>/2022/10/23/%E8%B0%83%E5%BA%A6%E5%9C%BA%E7%AE%97%E6%B3%95-Shunting-Yard-Algorithm/</url>
    <content><![CDATA[<h1 id="调度场算法"><a href="#调度场算法" class="headerlink" title="调度场算法"></a>调度场算法</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>调度场算法用于将中缀表达式转换为后缀表达式(逆波兰表达式).</p>
<blockquote>
<p>e.g<br> 中缀表达式”5*(6&#x2F;2+7)”的后缀表达式为 6 2 &#x2F; 7 + 5 * </p>
</blockquote>
<p> 后缀表达式无需考虑运算符的优先级(不需要使用括号标识优先级),只需按照运算符从左到右的出现顺序进行运算,即可得到表达式的值,因此便于计算机对其进行识别处理.</p>
<h3 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h3><blockquote>
<p>使用一个栈存储表达式的运算符</p>
</blockquote>
<p>首先遍历待中缀表达式</p>
<ul>
<li>遇到运算数时,直接将其添加到后缀表达式中</li>
<li>遇到运算符,先判断是否满足运算条件:<br><u>运算符栈非空并且栈顶运算符的优先级不低于当前运算符的优先级</u>                          <ul>
<li>满足运算条件:<br> 栈顶的运算符弹出并且添加到后缀表达式中并(表示执行了一次运算).继续判断运算条件(若满足,则重复上述过程),直至不满足运算条件</li>
<li>不满足运算条件, 当前运算符入栈</li>
</ul>
</li>
</ul>
<p>完成表达式的遍历后,栈中可能仍存在运算符.将这些剩余的运算符依次从栈顶弹出,并且添加到后缀表达式中(表示依次执行这些栈顶运算符的运算).最终得到后缀表达式将其输出.</p>
]]></content>
  </entry>
</search>
