<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>表达式求值(Expression Evaluation)</title>
    <url>/2022/10/24/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>机器很难处理我们平时使用的中缀表达式(运算符位于操作数中间),因需要对其进行优先级的判定.而后缀表达式(逆波兰表达式)无需考虑运算符的优先级,只需按照运算符从左到右的出现顺序依次进行运算,即可得到表达式的值.</p>
<blockquote>
<p>中缀表达式5*(6&#x2F;2+7)的后缀表达式为 6 2 &#x2F; 7 + 5 *</p>
</blockquote>
<p>由Dijkstra提出的<a href="%22https://zh.wikipedia.org/wiki/%E8%B0%83%E5%BA%A6%E5%9C%BA%E7%AE%97%E6%B3%95%22%3E">调度场算法(Shunting Yard Algorithm)</a>,可将中缀表达式转换为后缀表达式.该算法使用一个栈存储表达式中的运算符,其基本过程为:</p>
<ul>
<li>遇到运算数,将其添加到后缀表达式中.</li>
<li>遇到运算符,先进行运算条件的判断,运算条件为:<br><u>运算符栈非空并且栈顶运算符的优先级不低于当前运算符的优先级</u>                       <ul>
<li>满足运算条件<br>将栈顶运算符弹出后添加到后缀表达式中(表示执行了一次运算).继续判断运算条件,若满足运算条件则重复上述过程,直至不满足运算条件.</li>
<li>不满足运算条件<br>将当前运算符压入运算符栈.</li>
</ul>
</li>
</ul>
<p>完成表达式的遍历后,栈内可能仍存在运算符.将这些剩余的运算符依次从栈顶弹出,并且添加到后缀表达式中(表示依次执行这些栈顶运算符的运算).最终得到后缀表达式将其输出.<br>对该算法进行一些改进,便可实现表达式的求值.</p>
<h2 id="改进内容"><a href="#改进内容" class="headerlink" title="改进内容"></a>改进内容</h2><p>  对调度场算法(Shunting Yard Algorithm)的改进体现在两个方面：</p>
<ul>
<li>增加一个存储运算数的栈,遇到运算数时直接将其压入栈中  </li>
<li>具体实现弹出栈顶运算符时的运算  <ul>
<li>遇到运算符并且满足运算条件时,执行一次运算:根据栈顶运算符的目数, 从运算数栈中弹出相应数量的运算数进行相应的计算, 再将计算结果压入运算数栈中, 最后弹出栈顶运算符,表示本次运算结束.                 </li>
<li>表达式读取完成后, 栈中可能存在剩余元素(此时从栈顶到栈底运算符的优先级依次递减,栈非空时始终满足运算条件), 因此依次对剩余运算符进行运算,直至运算符栈为空.</li>
</ul>
</li>
</ul>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ol>
<li><p>处理表达式</p>
<ul>
<li>判断表达式是否有效(当前仅实现括号匹配的检测)<br>使用一个栈btk存储左括号<br>遇到左括号,其直接入栈<br>遇到右括号,检测与栈顶的左括号是否匹配.<br>  匹配方式为两者在pairs中对应的值互为相反数.<br>读取完表达式后,还要检测左括号栈是否为空,若栈非空,表明存在多余的左括号,表达式无效. <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string expr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt;check;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; pairs = </span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="string">&#x27;(&#x27;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;)&#x27;</span>, <span class="number">-1</span>&#125;, </span><br><span class="line">        &#123;<span class="string">&#x27;[&#x27;</span>, <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;]&#x27;</span>, <span class="number">-2</span>&#125;, </span><br><span class="line">        &#123;<span class="string">&#x27;&#123;&#x27;</span>, <span class="number">3</span>&#125;, &#123;<span class="string">&#x27;&#125;&#x27;</span>, <span class="number">-3</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; expr.<span class="built_in">length</span>() &amp;&amp; expr[i] != <span class="string">&#x27;=&#x27;</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//出现括号</span></span><br><span class="line">        <span class="keyword">if</span>(pairs.<span class="built_in">count</span>(expr[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> bkt = expr[i];</span><br><span class="line">            <span class="type">int</span> val = pairs[bkt];</span><br><span class="line">            <span class="keyword">if</span>(pairs[bkt] &gt; <span class="number">0</span>)  <span class="comment">// 左括号</span></span><br><span class="line">            &#123;</span><br><span class="line">                check.<span class="built_in">push</span>(bkt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>                <span class="comment">// 右括号</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 当前右括号与栈顶左括号匹配</span></span><br><span class="line">                <span class="keyword">if</span>(!check.<span class="built_in">empty</span>() &amp;&amp; val == -pairs[check.<span class="built_in">top</span>()]) </span><br><span class="line">                &#123;</span><br><span class="line">                    check.<span class="built_in">pop</span>();</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">// 当前右括号与栈顶右括号不匹配</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读取完表达式 若栈中仍存在左括号, 则不匹配</span></span><br><span class="line">    <span class="keyword">return</span> check.<span class="built_in">empty</span>()? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>去除表达式expr中的空格 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">eraseSpace</span><span class="params">(string&amp; expr)</span>        </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = expr.<span class="built_in">find</span>(<span class="string">&quot; &quot;</span>); i != string::npos; i = expr.<span class="built_in">find</span>(<span class="string">&quot; &quot;</span>, i))</span><br><span class="line">    &#123;</span><br><span class="line">        expr.<span class="built_in">erase</span>(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>提取表达式中的数字 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">extractNumFromexpr</span><span class="params">(string expr, <span class="type">int</span>&amp; i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string nums;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(expr[i]))</span><br><span class="line">    &#123;</span><br><span class="line">        nums += expr[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(expr[i] == <span class="string">&#x27;.&#x27;</span>)  <span class="comment">//考虑小数的情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        nums += expr[i++];</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(expr[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            nums += expr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stod</span>(nums);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>识别运算符     </p>
<ul>
<li>获取运算符的属性:<br>  包括运算符的优先级和元数(元数也称为目数,即运算符所需运算对象的个数)<br>使用无序关联容器unordered_map建立运算符与优先级&#x2F;目数的映射.对于每一个键值对:key为运算符,value为该运算符的优先级&#x2F;目数.<br>  (也可用struct表示运算符,运算符的优先级与目数作为其成员, 然后编写函数根据运算符的名称获取其属性).</li>
</ul>
<p>  判断表达式有效后,在表达式的求值函数(后文的calculate)中创建一个字符串opr记录表达式中所有可能出现的运算符.<br>  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">opr</span><span class="params">(<span class="string">&quot;+-*/%^!(\&#x27;)[\\]&#123;|&#125;&quot;</span>)</span></span>;   </span><br></pre></td></tr></table></figure><br>  然后将opr分别传给getPrecedence和getArity获取这些运算符的属性.</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; precedence;  <span class="comment">// 存储运算符的优先级</span></span><br><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; arity;       <span class="comment">// 存储运算符的元数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getPrecedence</span><span class="params">(<span class="type">const</span> string &amp;tokens)</span>      </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> opr : tokens)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opr)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            precedence[opr] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">            precedence[opr] = <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>: precedence[opr] = <span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>: precedence[opr] = <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">            precedence[opr] = <span class="number">5</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\&#x27;&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\\&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;|&#x27;</span>:  <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            precedence[opr] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getArity</span><span class="params">(<span class="type">const</span> string &amp;tokens)</span>           </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> opr : tokens)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>:</span><br><span class="line">                arity[opr] = <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">                arity[opr] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;\&#x27;&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;\\&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;|&#x27;</span>:  <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                arity[opr] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>执行运算符所对应的运算</p>
<p>对于二元运算符,根据栈先进后出的特性, 应注意运算数出现的次序:</p>
<ul>
<li>后出栈的为被减数&#x2F;被除数&#x2F;底数</li>
<li>先出栈的为&#x2F;减数&#x2F;除数&#x2F;指数</li>
</ul>
</li>
</ul>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">performOp</span><span class="params">(<span class="type">char</span> op)</span>  <span class="comment">//根据运算符执行相应的运算</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arity[op] == <span class="number">2</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> num1, num2;</span><br><span class="line">        num1 = nums.<span class="built_in">top</span>(), nums.<span class="built_in">pop</span>();</span><br><span class="line">        num2 = nums.<span class="built_in">top</span>(), nums.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">switch</span>(op)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> num2 + num1;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> num2 - num1;     <span class="comment">//num2为被减数,num1为减数</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> num2 * num1;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> num2 / num1;     <span class="comment">//num2为被除数,num1为除数</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>: <span class="keyword">return</span> <span class="built_in">int</span>(num2) % <span class="built_in">int</span>(num1);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>: <span class="keyword">return</span> <span class="built_in">pow</span>(num2, num1); <span class="comment">//num2为底数,num1为指数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(arity[op] == <span class="number">1</span>) <span class="comment">//阶乘运算</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> num = nums.<span class="built_in">top</span>(), val = <span class="number">1</span>;</span><br><span class="line">        nums.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(; num &gt; <span class="number">1</span>; num--)</span><br><span class="line">        &#123;</span><br><span class="line">            val *= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>求表达式的值<br>  完成对表达式的处理和运算符的识别后,计算有效表达式的值.<br>  首先对表达式进行遍历<br>  (1) 读取到数字时<br> 调用函数extractNumFromexpr提取相应的运算数, 然后将其压入运算数栈nums中.<br> 当运算数为负数时,会出现负号’-‘,并非运算符减号.因此需要对表达式中的的负数进行特殊处理.<br> 处理方法为提前向运算数栈nums中压入一个0,从而将该负数转换为0与其绝对值进行一次减法运算,再将该负数的绝对值入栈.</p>
<p> 根据负号出现的位置分两种情况处理:</p>
<ul>
<li>负数出现在表达式开始处(第一个运算数为负数):开始运算前先将0压入运算数栈.</li>
<li>负数出现在表达式中间或结尾处(括号中出现负数):读取到左括号时先将0压入运算数栈,再将左括号压入运算符栈ops中.</li>
</ul>
<p>(2) 读取到运算符时</p>
<ul>
<li>如果为算术运算符,先判断是否满足运算条件<ul>
<li>若满足运算条件,则进行”改进内容”中的一次运算,该过程为:<br>根据栈顶运算符, 从运算数栈中弹出相应数量的运算数进行相应的计算,再将计算结果压入运算数栈中, 最后弹出栈顶运算符,表示本次运算结束.<br>继续进行运算条件的判断,满足运算条件则重复执行上述运算过程,直至不满足运算条件.</li>
<li>若不满足运算条件,则将当前运算符压入运算符栈ops中.</li>
</ul>
</li>
<li>如果为括号,需要将左括号与右括号分开处理   <ul>
<li>对于左括号,表示将在括号内进行一段子运算,因此在整个表达式中,其优先级最高.直接将其压入运算符栈,可合并到不满足运算条件的情况中.但左括号入栈后,表示正在进行括号内的运算,因此入栈后的左括号的优先级变为最低.<br>可采用如下方法,实现左括号入栈后优先级由最高变为最低:将ASCII码表中与左括号相邻的符号压入栈中,表示左括号入栈后优先级发生变化(左小括号用单引号’&#39;‘;左中括号用斜杠’\‘;左大括号用’|’).        </li>
<li>对于右括号,表示当前括号内的表达式已经完成读取,将其优先级设置为最低,这样即可完成括号内剩余的运算:进行栈顶运算符对应的运算然后将其依次弹出,直至遇到左括号.此时结束括号的运算.可将完成括号内剩余运算的过程合并到读取到算术运算符时满足运算条件的情况中.但不同的是左括号出栈时直接结束运算并且右括号不入栈.</li>
</ul>
</li>
</ul>
<p>  表达式读取完成后,运算符栈ops中可能仍存在剩余元素,因此需完成这些剩余运算.完成所有运算后,运算数栈nums中仅剩的栈顶元素即为表达式的值.</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">(string &amp;expr)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">eraseSpace</span>(expr);                      <span class="comment">//去除表达式中的空格</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isValid</span>(expr))                     <span class="comment">//表达式无效</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Invalid Expression&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">opr</span><span class="params">(<span class="string">&quot;+-*/%^!(\&#x27;)[\\]&#123;|&#125;&quot;</span>)</span></span>;      <span class="comment">//所有可能出现的运算符</span></span><br><span class="line">    <span class="built_in">getPrecedence</span>(opr), <span class="built_in">getArity</span>(opr);</span><br><span class="line">    <span class="comment">//负数出现在表达式开头</span></span><br><span class="line">    <span class="keyword">if</span>(expr[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)    </span><br><span class="line">    &#123;</span><br><span class="line">        nums.<span class="built_in">push</span>(<span class="number">0</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历表达式expr</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; expr.<span class="built_in">length</span>() &amp;&amp; expr[i] != <span class="string">&#x27;=&#x27;</span>; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(expr[i]))        <span class="comment">//读取到数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            nums.<span class="built_in">push</span>(<span class="built_in">extractNumFromexpr</span>(expr, i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>                                            </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> currOp = expr[i];  <span class="comment">//读取到运算符,使用currOp记录当前运算符</span></span><br><span class="line">            <span class="comment">//满足运算条件,执行一次运算                </span></span><br><span class="line">            <span class="keyword">while</span>(!ops.<span class="built_in">empty</span>() &amp;&amp; precedence[ops.<span class="built_in">top</span>()] &gt;= precedence[expr[i]])   </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//栈顶运算符为算术运算符</span></span><br><span class="line">                <span class="keyword">if</span>(arity[ops.<span class="built_in">top</span>()])                     </span><br><span class="line">                &#123;</span><br><span class="line">                    nums.<span class="built_in">push</span>(<span class="built_in">performOp</span>(ops.<span class="built_in">top</span>())), ops.<span class="built_in">pop</span>();                           </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//当前的运算符为右括号,且栈顶运算符为左括号</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ops.<span class="built_in">pop</span>();  <span class="comment">//将左括号从运算符栈中弹出</span></span><br><span class="line">                    <span class="keyword">break</span>;          <span class="comment">//此时已经完成括号内的运算,跳出循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当前运算符为左括号</span></span><br><span class="line">            <span class="keyword">if</span>(currOp == <span class="string">&#x27;(&#x27;</span> || currOp == <span class="string">&#x27;[&#x27;</span> || currOp == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//对左括号进行处理已使入栈后优先级变为最低</span></span><br><span class="line">                currOp == <span class="string">&#x27;(&#x27;</span> ? currOp-- : currOp++;</span><br><span class="line">                <span class="keyword">if</span>(expr[i + <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>)  </span><br><span class="line">                &#123;</span><br><span class="line">                    nums.<span class="built_in">push</span>(<span class="number">0</span>);   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右括号不入栈</span></span><br><span class="line">            <span class="keyword">if</span>(!(currOp == <span class="string">&#x27;)&#x27;</span> || currOp == <span class="string">&#x27;]&#x27;</span> || currOp == <span class="string">&#x27;&#125;&#x27;</span>))  </span><br><span class="line">            &#123;</span><br><span class="line">                ops.<span class="built_in">push</span>(currOp);                               </span><br><span class="line">            &#125;</span><br><span class="line">            i++;                       </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表达式读取完成,栈内可能仍存在运算符,依次完成剩余运算符的运算</span></span><br><span class="line">    <span class="keyword">while</span>(!ops.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        nums.<span class="built_in">push</span>(<span class="built_in">performOp</span>(ops.<span class="built_in">top</span>())), ops.<span class="built_in">pop</span>();                            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 运算数栈仅剩的栈顶元素即为表达式的值</span></span><br><span class="line">    cout&lt;&lt; nums.<span class="built_in">top</span>() &lt;&lt;endl;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完整代码 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calcultor</span></span><br><span class="line">&#123;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; ops;                      <span class="comment">//存储运算符</span></span><br><span class="line">    stack&lt;<span class="type">double</span>&gt; nums;                   <span class="comment">//存储运算数</span></span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; precedence;  <span class="comment">// 存储运算符的优先级</span></span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; arity;       <span class="comment">// 存储运算符的元数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eraseSpace</span><span class="params">(string&amp; expr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = expr.<span class="built_in">find</span>(<span class="string">&quot; &quot;</span>); i != string::npos; i = expr.<span class="built_in">find</span>(<span class="string">&quot; &quot;</span>, i))</span><br><span class="line">        &#123;</span><br><span class="line">            expr.<span class="built_in">erase</span>(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string expr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt;check;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; pairs =</span><br><span class="line">        &#123;</span><br><span class="line">            &#123;<span class="string">&#x27;(&#x27;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;)&#x27;</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;[&#x27;</span>, <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;]&#x27;</span>, <span class="number">-2</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;&#123;&#x27;</span>, <span class="number">3</span>&#125;, &#123;<span class="string">&#x27;&#125;&#x27;</span>, <span class="number">-3</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; expr.<span class="built_in">length</span>() &amp;&amp; expr[i] != <span class="string">&#x27;=&#x27;</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//出现括号</span></span><br><span class="line">            <span class="keyword">if</span>(pairs.<span class="built_in">count</span>(expr[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> bkt = expr[i];</span><br><span class="line">                <span class="type">int</span> val = pairs[bkt];</span><br><span class="line">                <span class="keyword">if</span>(pairs[bkt] &gt; <span class="number">0</span>)  <span class="comment">// 左括号</span></span><br><span class="line">                &#123;</span><br><span class="line">                    check.<span class="built_in">push</span>(bkt);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>                <span class="comment">// 右括号</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 当前右括号与栈顶左括号匹配</span></span><br><span class="line">                    <span class="keyword">if</span>(!check.<span class="built_in">empty</span>() &amp;&amp; val == -pairs[check.<span class="built_in">top</span>()])</span><br><span class="line">                    &#123;</span><br><span class="line">                        check.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 当前右括号与栈顶右括号不匹配</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 读取完表达式 栈中仍存在左括号, 则不匹配</span></span><br><span class="line">        <span class="keyword">return</span> check.<span class="built_in">empty</span>()? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getPrecedence</span><span class="params">(<span class="type">const</span> string &amp;tokens)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> opr : tokens)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (opr)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                precedence[opr] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">                precedence[opr] = <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>: precedence[opr] = <span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>: precedence[opr] = <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">                precedence[opr] = <span class="number">5</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\&#x27;&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\\&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;|&#x27;</span>:  <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                precedence[opr] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getArity</span><span class="params">(<span class="type">const</span> string &amp;tokens)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> opr : tokens)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (opr)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>:</span><br><span class="line">                    arity[opr] = <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">                    arity[opr] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;\&#x27;&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;\\&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;|&#x27;</span>:  <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                    arity[opr] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">extractNumFromexpr</span><span class="params">(string expr, <span class="type">int</span>&amp; i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string nums;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(expr[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            nums += expr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(expr[i] == <span class="string">&#x27;.&#x27;</span>)  <span class="comment">//考虑小数的情况</span></span><br><span class="line">        &#123;</span><br><span class="line">            nums += expr[i++];</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isdigit</span>(expr[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                nums += expr[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">stod</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">performOp</span><span class="params">(<span class="type">char</span> op)</span>  <span class="comment">//执行一次运算</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arity[op] == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> num1, num2;</span><br><span class="line">            num1 = nums.<span class="built_in">top</span>(), nums.<span class="built_in">pop</span>();</span><br><span class="line">            num2 = nums.<span class="built_in">top</span>(), nums.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">switch</span>(op)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> num2 + num1;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> num2 - num1;     <span class="comment">//num2为被减数,num1为减数</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> num2 * num1;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> num2 / num1;     <span class="comment">//num2为被除数,num1为除数</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>: <span class="keyword">return</span> <span class="built_in">int</span>(num2) % <span class="built_in">int</span>(num1);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>: <span class="keyword">return</span> <span class="built_in">pow</span>(num2, num1); <span class="comment">//num2为底数,num1为指数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arity[op] == <span class="number">1</span>) <span class="comment">//阶乘运算</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> num = nums.<span class="built_in">top</span>(), val = <span class="number">1</span>;</span><br><span class="line">            nums.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(; num &gt; <span class="number">1</span>; num--)</span><br><span class="line">            &#123;</span><br><span class="line">                val *= num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">(string &amp;expr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">eraseSpace</span>(expr);                      <span class="comment">//去除表达式中的空格</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isValid</span>(expr))                     <span class="comment">//表达式无效</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Invalid Expression&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">string <span class="title">opr</span><span class="params">(<span class="string">&quot;+-*/%^!(\&#x27;)[\\]&#123;|&#125;&quot;</span>)</span></span>;      <span class="comment">//所有可能出现的运算符</span></span><br><span class="line">        <span class="built_in">getPrecedence</span>(opr), <span class="built_in">getArity</span>(opr);</span><br><span class="line">        <span class="comment">//负数出现在表达式开头</span></span><br><span class="line">        <span class="keyword">if</span>(expr[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历表达式expr</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; expr.<span class="built_in">length</span>() &amp;&amp; expr[i] != <span class="string">&#x27;=&#x27;</span>; )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isdigit</span>(expr[i]))        <span class="comment">//读取到数字</span></span><br><span class="line">            &#123;</span><br><span class="line">                nums.<span class="built_in">push</span>(<span class="built_in">extractNumFromexpr</span>(expr, i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> currOp = expr[i];  <span class="comment">//读取到运算符,使用currOp记录当前运算符</span></span><br><span class="line">                <span class="keyword">while</span>(!ops.<span class="built_in">empty</span>() &amp;&amp; precedence[ops.<span class="built_in">top</span>()] &gt;= precedence[expr[i]])    <span class="comment">//满足运算条件,执行一次运算</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//栈顶运算符为算术运算符</span></span><br><span class="line">                    <span class="keyword">if</span>(arity[ops.<span class="built_in">top</span>()])</span><br><span class="line">                    &#123;</span><br><span class="line">                        nums.<span class="built_in">push</span>(<span class="built_in">performOp</span>(ops.<span class="built_in">top</span>())), ops.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//当前的运算符为右括号,且栈顶运算符为左括号</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        ops.<span class="built_in">pop</span>();  <span class="comment">//将左括号从运算符栈中弹出</span></span><br><span class="line">                        <span class="keyword">break</span>;          <span class="comment">//此时已经完成括号内的运算,跳出循环</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 当前运算符为左括号</span></span><br><span class="line">                <span class="keyword">if</span>(currOp == <span class="string">&#x27;(&#x27;</span> || currOp == <span class="string">&#x27;[&#x27;</span> || currOp == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//对左括号进行处理已使入栈后优先级变为最低</span></span><br><span class="line">                    currOp == <span class="string">&#x27;(&#x27;</span> ? currOp-- : currOp++;</span><br><span class="line">                    <span class="keyword">if</span>(expr[i + <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        nums.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//此时不满足运算条件或者结束了括号内的子运算</span></span><br><span class="line">                <span class="keyword">if</span>(!(currOp == <span class="string">&#x27;)&#x27;</span> || currOp == <span class="string">&#x27;]&#x27;</span> || currOp == <span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    ops.<span class="built_in">push</span>(currOp);</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//表达式读取完成,栈内可能仍存在运算符,依次完成剩余运算符的运算</span></span><br><span class="line">        <span class="keyword">while</span>(!ops.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            nums.<span class="built_in">push</span>(<span class="built_in">performOp</span>(ops.<span class="built_in">top</span>())), ops.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 运算数栈仅剩的栈顶元素即为表达式的值</span></span><br><span class="line">        cout &lt;&lt; nums.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string expr;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(cin, expr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Calcultor</span>().<span class="built_in">calculate</span>(expr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
</search>
